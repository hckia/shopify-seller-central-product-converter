// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductRow Single Row of data to produce a colors Amazon Seller Central Product
//
// swagger:model productRow
type ProductRow struct {

	// the handle for the product variation example is make-model-year-touch-up-kit
	Handle string `json:"handle,omitempty"`

	// name of the Option1 Name field
	OptionName string `json:"optionName,omitempty"`

	// value of the Option1 Name field, labeled Option1 Value
	OptionValue string `json:"optionValue,omitempty"`

	// price of the product.
	Price float64 `json:"price,omitempty"`

	// year of the product
	// Maximum: 2023
	// Minimum: 2000
	Year int64 `json:"year,omitempty"`
}

// Validate validates this product row
func (m *ProductRow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductRow) validateYear(formats strfmt.Registry) error {
	if swag.IsZero(m.Year) { // not required
		return nil
	}

	if err := validate.MinimumInt("year", "body", m.Year, 2000, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("year", "body", m.Year, 2023, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product row based on context it is used
func (m *ProductRow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductRow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductRow) UnmarshalBinary(b []byte) error {
	var res ProductRow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
